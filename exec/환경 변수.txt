JVM : open-jdk 17


IDE : IntelliJ IDEA 2024.1.4


jenkins : 

pipeline {
    agent any
    
    tools {
        nodejs "node-20.15.0"
    }

    stages {
        stage('Notify Start') {
            steps {
                script {
                    def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                    mattermostSend(
                        color: 'warning',
                        message: "빌드 시작: ${env.JOB_NAME} #${env.BUILD_NUMBER} \n(<${env.BUILD_URL}|Details>)",
                        endpoint: 'https://meeting.ssafy.com/hooks/zz3srn9q6tb9bq97mf47akxi7h',
                        channel: 'build-najackdo'
                    )
                }
            }
        }
        
        stage('git clone') {
            steps {
                git branch: 'develop', credentialsId: 'lij0825', url: 'https://lab.ssafy.com/s11-bigdata-recom-sub1/S11P21C105.git'
                script {
                    sh 'sudo chmod -R 777 server'
                    dir('server') {
                        sh 'cp /home/ubuntu/source/secret/application-auth.properties src/main/resources'
                        sh 'cp /home/ubuntu/source/secret/application-prod.properties src/main/resources'
                        sh 'cp /home/ubuntu/source/secret/najackdo-notice.json src/main/resources'
                    }
                    dir('client') {
                        sh 'cp /home/ubuntu/source/secret/.env ./'
                    }
                }
            }
        }

        stage('docker run') {
            steps {
                dir('server') {
                    sh 'sudo docker-compose up -d'
                }
            }
        }

        stage('build server') {
            steps {
                dir('server') {
                    withGradle {
                        sh 'sudo ./gradlew clean build'
                    }
                }
            }
        }

        stage('build client') {
            steps {
            dir('client') {
                sh 'NODE_ENV=development npm install'
                sh 'NODE_ENV=development CI=false npm run build'
                sh 'sudo rm -rf /home/ubuntu/source/build'
                sh 'sudo mv build /home/ubuntu/source'
                }
            }
        }

        stage('deploy') {
            steps {
                dir('server') {
                    sh 'sudo systemctl restart najackdo-server'
                    sh 'sudo systemctl restart nginx'
                }
            }
        }
    }

    post {
        success {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend(
                    color: 'good',
                    message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}\n(<${env.BUILD_URL}|Details>)",
                    endpoint: 'https://meeting.ssafy.com/hooks/zz3srn9q6tb9bq97mf47akxi7h',
                    channel: 'build-najackdo'
                )
            }
        }
        failure {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend(
                    color: 'danger',
                    message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}\n(<${env.BUILD_URL}|Details>)",
                    endpoint: 'https://meeting.ssafy.com/hooks/zz3srn9q6tb9bq97mf47akxi7h',
                    channel: 'build-najackdo'
                )
            }
        }
    }
}


웹서버 : EC2

server {
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name www.najackdo.kro.kr;

    root /home/ubuntu/source/build;

    client_max_body_size 10M;

    # Add index.php to the list if you are using PHP
    index index.html index.htm index.nginx-debian.html;
    error_page 404 =200 /index.html;

    location / {
        try_files $uri $uri/ /index.html;
    }

    # WebSocket configuration
    location /ws/ {
        proxy_pass http://localhost:8080;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /docs {
        proxy_pass http://localhost:5050;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }    
    
    location /login {
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /oauth2 {
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /swagger-ui {
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

   location /python {
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
}

    location /v3 {
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api-test {
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api {
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /item {
        proxy_pass http://localhost:8000/item;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # SSL configuration
    #
    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/www.najackdo.kro.kr/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/www.najackdo.kro.kr/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
    if ($host = www.najackdo.kro.kr) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80 ;
    listen [::]:80 ;
    
    location / {
        try_files $uri $uri/ =404;
    }
   
    client_max_body_size 10M;

    server_name www.najackdo.kro.kr;
    return 404; # managed by Certbot
}


-- build.gradle
buildscript {
    ext {
        restdocsApiSpecVersion = '0.18.2'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
}

group = 'com.najackdo'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // Spring Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.hibernate:hibernate-spatial:6.5.2.Final'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'


    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    implementation 'com.querydsl:querydsl-spatial'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // AWS S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // WebSockek & rabbitMQ
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'io.projectreactor.netty:reactor-netty'

    //Development
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.modelmapper:modelmapper:3.1.1'
    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'com.google.code.gson:gson:2.11.0'
    testImplementation 'org.projectlombok:lombok'

    // Documentation
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"

    //FCM
    implementation 'com.google.firebase:firebase-admin:7.1.1'
    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'


}

openapi3 {
    servers = [
            { url = "http://localhost:8080" },
            { url = "https://www.najackdo.kro.kr" }
    ]
    title = 'NAJACKDO API Documentation'
    description = '나작도 프로젝트 나작도의 API 문서입니다.'
    version = '0.0.1'
    outputFileNamePrefix = 'najackdo-api-docs'
    format = 'yaml'
    outputDirectory = 'build/resources/test/docs'
}

tasks.register('openapi3-security-schemes') {
    dependsOn 'openapi3'
    doFirst {
        def swaggerUIFile = file("${openapi3.outputDirectory}/${openapi3.outputFileNamePrefix}.${openapi3.format}")

        def securitySchemesContent = "  securitySchemes:\n" +                     \
                                                         "    APIKey:\n" +                     \
                                                         "      type: apiKey\n" +                     \
                                                         "      name: Authorization\n" +                     \
                                                         "      in: header\n" +                    \
                                                         "security:\n" +
                "  - APIKey: []  # Apply the security scheme here"

        swaggerUIFile.append securitySchemesContent
    }
}

tasks.named('test') {
    useJUnitPlatform()
}


-- application properties
spring.application.name=server
spring.profiles.include=auth
firebase.path = firebase/najackdo-notice.json


# Secret properties
spring.jwt.secret=najackdonajackdonajackdonajackdonajackdo
# KAKAO
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=kakao_account
spring.security.oauth2.client.registration.kakao.client-name=kakao
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.client-id=49db88f80ba2d50efcf6fd445497e771
spring.security.oauth2.client.registration.kakao.client-secret=kLnWHgtAmfA0hbZJGdrqa1kfyV2Jr2IN
spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8080/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.scope=account_email,profile_nickname, profile_image
# S3
cloud.aws.region.static=ap-northeast-2
cloud.aws.stack.auto-=false
cloud.aws.credentials.accessKey=AKIA3FLDX2N75BJLGD4O
cloud.aws.credentials.secretKey=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
cloud.aws.s3.bucket=najackdo/images
cloud.aws.s3.cloudFrontDomain=https://d16os79fbmszq4.cloudfront.net
# multipart
spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=2MB
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
# KAKAO PAY API
kakaopay.api.secret.key=DEV86281C93C936CA199E81EBF2FAAF0E372CE51
cid=TC0ONETIME
kakaopay.api.host=http://localhost:8080
kakaopay.redirect.url=http://localhost:3000


spring.application.name=server
# Database
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/najackdo
spring.datasource.username=najackdo
spring.datasource.password=najackdo
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.spatial.dialect.postgis.PostgisPG95Dialect
# MongoDB
spring.data.mongodb.uri=mongodb://najackdo:najackdo@localhost:27017/najackdo
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.username=najackdo
spring.data.mongodb.password=najackdo
spring.data.mongodb.database=najackdo
spring.data.mongodb.authentication-database=admin
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=false
#spring.data.redis.database=0
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.password=najackdo
spring.jwt.access-expire=1000000000
spring.jwt.refresh-expire=1000000000
# Logging
logging.level.org.springframework=INFO
logging.level.org.hibernate=INFO
logging.level.com.najackdo=DEBUG
# multipart
spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=2MB
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
# rabbitMQ
spring.rabbitmq.username=najackdo
spring.rabbitmq.password=najackdo
spring.rabbitmq.host=localhost
spring.rabbitmq.port=61613
spring.rabbitmq.virtual-host=/
#swagger
springdoc.swagger-ui.path=/api-test
springdoc.swagger-ui.groups-order=desc
springdoc.swagger-ui.tags-sorter=alpha
springdoc.swagger-ui.operations-sorter=method
springdoc.paths-to-match=/api/v1/**
springdoc.use-fqn=true
# Pageable
spring.data.web.pageable.default-page-size=10


-- certification.json (najackdo-notice.json)
{
  "type": "service_account",
  "project_id": "najackdo-8e4d1",
  "private_key_id": "118399f317c85f8947805edcf49e24a8956fae9a",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC/14jEUMX3o2e/\nnOIZNHUpveZVjCBuhFA7MAShWafO8E1N6237qsAo+Y2uGMbAclgk5bxbwEgHTQ/Z\nGtvAUZkZp8JRzQPvxHyfsgVwyK6f1xxijaGd3FmG5LeVcISLuUii1jtOR96DIQw8\n2lSTVZPjiBj1ZVy9RB5E+HtK57Fc5TTNG/mvIFvkTHgT9yvhrri51k9l5b4Y+ZK4\nrM/B1l2c58sA2eHKt3e8X5GPHu9HUqRWezk5jC4muWFdyikrGl4NUyFQWH+PDM1f\nuFWEsTbeEh/scZ7o4p8eKyJ1Eb6hR9UmQ/pDrSScyg/s6oycnwemqkG7MEUWGccf\nrbMW7nZzAgMBAAECggEALE4bPHeJGOWInuSdBQQr8N12Fhi8Hrn5C4pN73OUwUKX\nH+E478/h/DSSJ3x6XlSqDa9u/mOcXu9JszK0QKi3qoinZJvsBlJDE+CZyA/Y4Hpe\nCFa8VghfNruYuG8ZdWlvoIfIf44ykecue9lSggpYEsrKNNZZgi56rSQT2VtEB3dT\ncrlbWPucLt29xqOhhn2KxyqiUkwEHD8p0OPCRbF1nOA6wfkVj4SlMV1tVEV1C2F3\nbLKln7MGZvj7A6IkrxDa5oRkEmIqnUzQyhdGkCrQFyVnK22OzxJQc3gRxzfNFR7K\naShyONKGGUlK06keiHXCWtCNv0MEqhjRHHJqhwxlyQKBgQDnakxo2zChIpvevEXu\nRDl5UiUbl0Yvivueudi4MdzLRUV2x/NnM64gS9EfaB6s6+bWlIctMeakCbPMUeTe\n1aDywUeedVPCa/b0//kAYJRbeGzhDJSOthEumzT6uN9uJcbD/8bPqG8NCXKwopNI\neFHWqZXtLr+ze9WDs+75EAZnWQKBgQDUOPpFpf2YmXP4AvSUnAtnkEL5jpCQc/lM\n/KU0O3PLa8XSDLT/Ku2OlCh6MQjYmxfdC4Td24qLEayxCXls2gCYbOmDQ+oS+b2U\nIMr3ez8lQroWLJBp/foiR7QTtEm31gVbvc2LD8zltUw5XKAtusVZxnDQdnj56JYw\nz6ejwIMeqwKBgQCV8zkj0LQIFYbuowylQawEQwgsgq9F60b0KPSXFig9xtsmBpZf\nzwsLflU5hpwp7IodjQyyal1K+cZ5pK8q/T5XTop70Qa/OnpBcwQEDJDVXIkgoqg4\neR1VF9kShWyx0OSk6D4JHNkol3CrqAzLrrtI34Z4tAwf3yQRPSyiUpHzsQKBgBhf\nvubW7KxlG3uloz+aOHkZiYeuBw6AM2bTMYoxNdhsNVktmnAgFw6kF44JKbHvBiue\nEhGFEIFucz4WD3sgAqd/AsbPuweY5Vwo9Aa+gf8ejc7UKXXy9JKRV65Xq4vQqebi\ngsPw+aB8VRfVepQl+lqYPwbCRJy3SOCsSN2205hnAoGAKmDK7BhWN5dwo/361Ynr\nJ7SR4EkZMu0sMW+u6jwmOfcDB7dJ+3xfBmTL/G4nqX6MMuECMeIUuHFAccPtt08z\nmisxRE3Q1Y7+efJUZgCDFIUFCX9bLs+qruSE+duHCLvnk4itTDgNoZqsOOVMXBsp\nnX2SFfG1ss7Il/JNZ/Iqsz8=\n-----END PRIVATE KEY-----\n",
  "client_email": "firebase-adminsdk-bbzy1@najackdo-8e4d1.iam.gserviceaccount.com",
  "client_id": "115532506978988229868",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-bbzy1%40najackdo-8e4d1.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}


-- .env
REACT_APP_KAKAO_API_KEY="780481e86ad3536ccb94bd9907c24004"
REACT_APP_BACKEND_PROD_HOST="https://www.najackdo.kro.kr"
REACT_APP_FIREBASE_API_KEY="AIzaSyCuY0bqnIZqYkNb5oW2wHduXkQ42Y0DP_Q"
REACT_APP_FIREBASE_AUTH_DOMAIN="najackdo.firebaseapp.com"
REACT_APP_FIREBASE_PROJECT_ID="najackdo"
REACT_APP_FIREBASE_STORAGE_BUCKET="najackdo.appspot.com"
REACT_APP_FIREBASE_MESSAGING_SENDER_ID="870751010363"
REACT_APP_FIREBASE_APP_ID="1:870751010363:web:9da2e24bb0d2b9b9e9a61e"
REACT_APP_FIREBASE_MEASUREMENT_ID="G-DPW9DFLZE9"
REACT_APP_FIREBASE_VAPID_KEY="BM7wQK8ErCrezXBB7hcrA2O-ln70-cHEpdxuzbww2YyTCadZSHjkrf2RTSJAGILS_CpM24lU1L4XL0tlHoDX9Og"